use rstest::*;

use crate::crypto::*;

/// Base64 encoded private key for testing.
static TEST_PRIVATE_KEY: &str = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBb3FPLzErRkNiclBhblYxSk1GVnRHWEFKN1NPWHN2KzRGeEhwTmN1RXZuK2l2RFMrCmp6TWF2dzRLOFVjRFA1am80T0FNMU9Ea0JYWkgxYnZsRFpyZEpCUWhXazNNSFMvVUxMM2FIcjVFUDVZMFB6Vi8KSy9SL0poTXVEQXBxNjBjbThlWmx1bHVmMlUvbTVwSHV4LzRaeTAxOW56RjVnMTR4Wk9RSTMyVmd4NHRXSHBuQQpiUy81N1VMbitzWEhYZytmdXQrNnZFV3lDRFd2YUNIWEtDVTBIbmJxbjlWeGRVZThiS1N6YmRhUUdYK1NZNGp3CnNxOElSU3J3VkVHYzVRa1N5eERHQ1FMeCtYbTRHS2lPQklQV3NmODZNZjlPM3R5NThkY0lNTXJGUnJYNkc5RVcKY1QzSTRZWHBxTUhVaWpQYmFEQVJsd3lTKzlXc2lhdkI4ZXE1MHdJREFRQUJBb0lCQUF2R1pqMG5mUlg0WmQ0RQplSDJNTHg0VjIxVEtGeEZwd1RiRHRiVGtNTGxTdlZkUFRFZjFoUklMQ1dZY09aTW1WaDlJZnJWVTQ1SzAveERDCjQwWlZEWDRFdFJZaTBYY3ExTkRqeCt4M2piSmxoTHFFMFlScHF3dWpKNFROKzUxZ0pUb3Q3NTgxUTFhZm1kSGMKcnBpQ2dFbnAvaXZZa0U4ZlhUSjI3Z3VGSi9qRkNMYitLZTBOV0k3Y1h1NjRTMGRSNVllZ213N3JlYlQ5TmtzMApBNVh6dnlaSWlXTTNkWlV4QkNvMjc1V2hXWlZJUEUvejF5Sy9iTkxLSGRjYXBYZmJmUWdCcHgzKzQ5S3VJWldGCk1NUXQwa2U4akpscUZpQVNnaXptc0JkTXE4Qjh0QzNPam5ka0ZTTWxpdmdMYkMvM3dZRVE0ekJ5bjBqeUVzKzQKUTErU2Q4MENnWUVBelMvdnVSNEk1WDRITE5mdzVIZG50blNPN05sazM5Q0N6ZFRRT1RKZWRjZmI2UDBGU2hBSgpCOW52UGEvVjRENUpEU0dUVnA5dk9TaXVUeVVvWCtiSmV6NUxwRklrWmE2Y0h1bGpEdmpGUGpnWWN5TDRURmpOCktzUCs0ck1XQ0k3ZkNaNXZLNUsraWZNODJmUkhhTnNXK242VVdadTFmSys4UFY3cHl0NzcxSDhDZ1lFQXl1cDIKWFJERWtGMEUxZWFybUJSV0JKNW53RnhNYnZSRk5KK1RuUXR3VGZ6WUM2UEJyWiticzZ1ZThmbXlXbURCNmNEMQpIdG1OUVYweXZnNGRvL3NsLzBIMEpUczFLOGl5UzZVNXp4TW9pMXAyL3JSaWRYSGttVmhkODR5QWlOTUxJNjZYCjRoUGF0cDAxN2JwRUhPMU1GSkNITFBZeW8xUHVKQWV4WXkyejRLMENnWUJTeFVTWjAyRFpXcmFBUTNmY1ljS0gKbW90UlJmem9RRStUd29aZ25FMzRpeS9OMDh0L2JlcUdyVVpTQncxcTBSVmM0Njl3NFEzWDYrNHM1UnRkWEZibwpqVitzSUtxb0RnRFNnMmsvVCtFWlVUMmpySGFuTGFkTjJoU0cxS0ZOd0h4K2Y5ZnVwdHFRQVh3Sm0vMzJjWExhCmg1ZEdjb2FLanNXTHFDNzlkR2YzOXdLQmdCNldYMGRDR3M5RUpsRjBGeE95cFJESExBNlVHelZ5ZnVnaTBlYVAKYmR0anJORjhXdHFvUDVsQzJvL1JPdkJpdTNoWUROc2NvaTFqTmgzdUZNdStOUWtZVVF3M3M1a3BCSzlnZGFsZwpVdkZHcnI5UVE3TStldDRlc3ZMZWtCV1A4cExyWTV2QnNHdHNvVTkzajRMb3hsb25PeWtzNTQ4MVBLV1R2MHFhCi9nMTFBb0dBWGc5RWVEVjZtd0daSHB2cTBrcjljV2hvY0pjLzN2TWkvNEVYUDFySUVIT2ErMEluclRiR3pTamkKczNMOEkwSkZwWWQzMGdZY2UxT2tuMmlCdnBaaXZiVkN3RUJnYUhpM3dtL3pGcEhFeWhvUVNxZGdpYU4rYjNycgpQWmNvUWtyZjREWVg3ZmJuOUo5NGZWc2pGSVJqeU8yR3F5WEdES2x5SWljZ0RSNngwcGc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==";

/// Base64 encoded public key for testing.
static TEST_PUBLIC_KEY: &str = "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFvcU8vMStGQ2JyUGFuVjFKTUZWdApHWEFKN1NPWHN2KzRGeEhwTmN1RXZuK2l2RFMranpNYXZ3NEs4VWNEUDVqbzRPQU0xT0RrQlhaSDFidmxEWnJkCkpCUWhXazNNSFMvVUxMM2FIcjVFUDVZMFB6Vi9LL1IvSmhNdURBcHE2MGNtOGVabHVsdWYyVS9tNXBIdXgvNFoKeTAxOW56RjVnMTR4Wk9RSTMyVmd4NHRXSHBuQWJTLzU3VUxuK3NYSFhnK2Z1dCs2dkVXeUNEV3ZhQ0hYS0NVMApIbmJxbjlWeGRVZThiS1N6YmRhUUdYK1NZNGp3c3E4SVJTcndWRUdjNVFrU3l4REdDUUx4K1htNEdLaU9CSVBXCnNmODZNZjlPM3R5NThkY0lNTXJGUnJYNkc5RVdjVDNJNFlYcHFNSFVpalBiYURBUmx3eVMrOVdzaWF2QjhlcTUKMHdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==";

const TEST_ITEM_01: (&str, &str) = (
    "Hello world!",
    "QcLodMk406EgFF2FhXF3kOG1ewl+hoFNEu0SO0+oSpDNPYqFqurqyfCp7WRFlaVo0qQefKCiSkBvWXj5HtZiYdJd8lOkTyzxgvSOMyPR1E8em916Wb5VfAyEaUe8sTa6pWhSwwpFqb2okSKUH6Pk7WLqcS7c44LBS1juzGQkJsDoGkgqKeZTTDn01+7UmpUE187erMcYFJd9NJCopM7duom47XyymCkmX4AURwQ+4i1vdYtELrCWWsuG409DyByrs4MoJGN5htY7vmts+0UuNSp0BnMg3C6f8uyQYdYJimglpD4QM1NGclwolvXsDi1YnDpQRwWOhQwv/gVNkPjpxA==",
);

const TEST_ITEM_02: (&str, &str) = (
    "FediProto Sync",
    "FXCL6b0mPSEmdagkBPhsVJDd5MvZ2RevsTglNacZ/t2wFABq+SdICMOpiA2CHe3JicVWgATcuqUg9CYOzZTA00fDmGxGx3HB+BRTuEBuvJvAo/L4LbLIStxCu5SO82iHCS+QfcZknD8wcAa8G3WU4WxcuR0nVvRCl29jB+lvYMsvqy4Z/GsBkcb5crLuSCbtj90kGVHoFGLHbIy2NVQ7jy0oLCo9stWg0w8x5XqgVCoG1tRepZS+GXJjy/NDK6gQ+VWMcvo7pOrg/d8E145vt3yxqZNPGpYV9MHAsaM0N4RQUjK2yrEr8OQYIfIv3RmuluX8wtO59qub5AVKqgpusQ==",
);

/// Loads the test private key.
#[fixture]
#[once]
fn test_private_key() -> openssl::rsa::Rsa<openssl::pkey::Private> {
    let decoded_bytes = openssl::base64::decode_block(TEST_PRIVATE_KEY)
        .expect("Failed to decode test private key from Base64");

    openssl::rsa::Rsa::private_key_from_pem(&decoded_bytes).expect("Failed to decode private key")
}

/// Loads the test public key.
#[fixture]
#[once]
fn test_public_key() -> openssl::rsa::Rsa<openssl::pkey::Public> {
    let decoded_bytes = openssl::base64::decode_block(TEST_PUBLIC_KEY)
        .expect("Failed to decode test public key from Base64");

    openssl::rsa::Rsa::public_key_from_pem(&decoded_bytes).expect("Failed to decode public key")
}

/// Tests to ensure an encrypted string is generated by `encrypt_string()`.
#[rstest]
#[case(TEST_ITEM_01.0)]
#[case(TEST_ITEM_02.0)]
fn encrypt_string__is_encrypted(
    test_public_key: &openssl::rsa::Rsa<openssl::pkey::Public>,
    #[case] input: &str,
) {
    let encrypted_string =
        encrypt_string(test_public_key, input).unwrap_or_else(|_| "".to_string());

    println!("{} ->\n\t{}", input, encrypted_string);

    assert!(!encrypted_string.is_empty());
}

/// Tests to ensure an encrypted string is successfully decrypted to it's
/// correct value with `decrypt_string()`.
#[rstest]
#[case(TEST_ITEM_01)]
#[case(TEST_ITEM_02)]
fn decrypt_string__is_correct_value(
    test_private_key: &openssl::rsa::Rsa<openssl::pkey::Private>,
    #[case] test_item: (&str, &str),
) {
    let decrypted_string = decrypt_string(test_private_key, &test_item.1).unwrap();

    println!("{} <-\n\t{}", decrypted_string, test_item.1);

    assert!(decrypted_string == test_item.0);
}
