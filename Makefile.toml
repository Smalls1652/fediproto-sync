env_scripts = [
# Parse and set 'BUILD_TARGET' environment variable.
'''
#!@duckscript

input_target = get_env BUILD_TARGET

if is_empty ${input_target}
    input_target = get_env CARGO_MAKE_RUST_TARGET_TRIPLE
end

set_env BUILD_TARGET ${input_target}
''',
# Parse and set 'CONTAINER_BUILD_TAG' environment variable.
'''
#!@duckscript

task_name = get_env CARGO_MAKE_TASK

if not equals ${task_name} "create-container-image"
    return
end

input_tag = get_env CONTAINER_BUILD_TAG
input_tag_arg = array_get ${@} 0

if not is_empty ${input_tag_arg}
    input_tag = set "${input_tag_arg}"
end

if is_empty ${input_tag}
    input_tag = set "fediproto-sync-local:latest"
end

set_env CONTAINER_BUILD_TAG ${input_tag}
''',
# Parse and set 'CONTAINER_BUILD_PLATFORM' environment variable.
'''
#!@duckscript

task_name = get_env CARGO_MAKE_TASK

if not equals ${task_name} "create-container-image"
    return
end

input_platform = get_env CONTAINER_BUILD_PLATFORM
input_platform_arg = array_get ${@} 1

if not is_empty ${input_platform_arg}
    input_platform = set "${input_platform_arg}"
end

if is_empty ${input_platform}
    input_platform = set "linux/amd64"
end

set_env CONTAINER_BUILD_PLATFORM ${input_platform}
''',
# Parse and set 'BUILD_PACKAGE_NAME' environment variable.
'''
#!@duckscript

task_name = get_env CARGO_MAKE_TASK

if not equals ${task_name} "build-package"
    return
end

input_package = get_env BUILD_PACKAGE_NAME
input_package_arg = array_get ${@} 0

if not is_empty ${input_package_arg}
    input_package = set "${input_package_arg}"
end

if is_empty ${input_package}
    input_package = set "fediproto-sync"
end

set_env BUILD_PACKAGE_NAME ${input_package}
'''
]

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

# Overrides

## Run test.
[tasks.test]
args = ["test", "--", "--show-output"]

# Core

## Format code.
[tasks.rustfmt]
category = "core"
description = "Format code"

command = "cargo"
args = ["--verbose", "fmt"]

## Build a package in the workspace.
[tasks.build-package]
category = "core"
description = "Build a package in the workspace."
workspace = false

command = "cargo"
args = ["build", "--package=${BUILD_PACKAGE_NAME}"]

## Build a package in the workspace for a specific target.
[tasks.build-package-target]
category = "core"
description = "Build a package in the workspace for a specific target."
workspace = false

command = "cargo"
args = ["build", "--package=${BUILD_PACKAGE_NAME}", "--target=${BUILD_TARGET}"]

## Build a package in the workspace in release mode.
[tasks.build-package-release]
category = "core"
description = "Build a package in the workspace in release mode."
workspace = false

command = "cargo"
args = ["build", "--package=${BUILD_PACKAGE_NAME}", "--target=${BUILD_TARGET}"]

## Build fediproto-sync.
[tasks.build-fediproto-sync]
category = "core"
description = "Build fediproto-sync."
workspace = false

command = "cargo"
args = ["build", "--package=fediproto-sync"]

## Build fediproto-sync for a specific target.
[tasks.build-fediproto-sync-target]
category = "core"
description = "Build fediproto-sync for a specific target."
workspace = false

command = "cargo"
args = ["build", "--package=fediproto-sync", "--target=${BUILD_TARGET}"]

## Build fediproto-sync in release mode.
[tasks.build-fediproto-sync-release]
category = "core"
description = "Build fediproto-sync in release mode."
workspace = false

command = "cargo"
args = ["build", "--package=fediproto-sync", "--release", "--target=${BUILD_TARGET}"]

## Create distribution artifacts.
[tasks.dist]
category = "core"
description = "Create distribution artifacts."
workspace = false

script_runner = "@shell"
script = '''
COMPILED_PATH="${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/${BUILD_TARGET}/release/fediproto-sync"
OUTPUT_DIR="${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/dist/${BUILD_TARGET}"

if [ -d "${OUTPUT_DIR}" ]; then
    rm -rf "${OUTPUT_DIR}"
fi

mkdir -p "${OUTPUT_DIR}"
cp "${COMPILED_PATH}" "${OUTPUT_DIR}/fediproto-sync"

echo "\tOutput path: ${OUTPUT_DIR}/fediproto-sync"
'''
dependencies = ["build-fediproto-sync-release"]

# OS Dependency installs

## Install OS dependencies.
[tasks.install-dependencies]
category = "os_dependencies"
description = "Install OS dependencies."
workspace = false

linux_alias = "install-linux-dependencies"
mac_alias = "install-macos-dependencies"
windows_alias = "empty"

## Install OS dependencies for Linux. 
[tasks.install-linux-dependencies]
condition = { platforms = ["linux"] }
category = "os_dependencies"
description = "Install OS dependencies for Linux."
workspace = false

install_script = '''
#!/bin/bash

DISTRO_ID=$(cat /etc/*release | sed -nE "s/^ID=(.+)$/\1/p")

PACKAGE_INSTALLER=""
if command -v apt-get &> /dev/null; then
    PACKAGE_INSTALLER="apt-get"
elif command -v dnf &> /dev/null; then
    PACKAGE_INSTALLER="dnf"
else
    echo "Unsupported platform: ${DISTRO_ID}"
    exit 1
fi

if [ "${PACKAGE_INSTALLER}" == "apt-get" ]; then
    sudo apt-get update
    sudo apt-get install -y \
        build-essential \
        g++-x86-64-linux-gnu \
        libc6-dev \
        git \
        pkg-config \
        cmake \
        libpq-dev \
        libpq5 \
        libsqlite3-dev \
        libsqlite3-0 \
        libssl-dev
elif [ "${PACKAGE_INSTALLER}" == "dnf" ]; then
    sudo dnf install -y \
        gcc \
        gcc-c++ \
        glibc-devel \
        git \
        pkgconfig \
        cmake \
        libpq-devel \
        libpq \
        sqlite-devel \
        sqlite \
        openssl-devel
fi
'''

## Install OS dependencies for macOS.
[tasks.install-macos-dependencies]
condition = { platforms = ["mac"] }
category = "os_dependencies"
description = "Install OS dependencies for macOS."
workspace = false

install_script = '''
echo "Checking to see if Homebrew is installed."

if ! command -v brew &> /dev/null; then
    echo -e "Homebrew is not installed.\n"
    echo "Follow the install instructions here before running:"
    echo "https://brew.sh/"

    exit 1
else
    echo "Homebrew is installed."
fi

echo ""

DEPENDENCIES_TO_INSTALL=(
    "git"
    "pkgconf"
    "gcc"
    "make"
    "cmake"
    "perl"
)

for DEPENDENCY in "${DEPENDENCIES_TO_INSTALL[@]}" ; do
    if brew list -1 | grep -q "^${DEPENDENCY}\$"; then
        echo "${DEPENDENCY} is already installed"
    else
        echo "Installing ${DEPENDENCY}"
        brew install ${DEPENDENCY}
    fi
done
'''

# Container build tasks

## Create container images for fediproto-sync.
[tasks.create-container-image]
category = "container_build"
description = "Create container images for fediproto-sync."
workspace = false

command = "docker"
args = [
    "build",
    "--load",
    "--tag",
    "${CONTAINER_BUILD_TAG}",
    "--platform",
    "${CONTAINER_BUILD_PLATFORM}",
    "--file",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/Dockerfile",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
]

## Build fediproto-sync in release mode for a container image.
[tasks.build-fediproto-sync-container]
condition = { platforms = ["linux"], env = { BUILD_ENVIRONMENT = "CONTAINER" } }
category = "container_build"
description = "Build fediproto-sync in release mode for a container image."
workspace = false

script = '''
#!/bin/bash

cargo build --package=fediproto-sync --release --target=${RUST_TARGET}
mkdir -p "/tmp/fediproto-sync/linux_${TARGETARCH}"
cp "./target/${RUST_TARGET}/release/fediproto-sync" "/tmp/fediproto-sync/linux_${TARGETARCH}/fediproto-sync"
'''
dependencies = [
    "set-build-container-env"
]

## Set environment variables for building a container image.
[tasks.set-build-container-env]
condition = { platforms = ["linux"], env = { BUILD_ENVIRONMENT = "CONTAINER" } }
category = "container_build"
description = "Set environment variables for building a container image."
workspace = false

env.FEDIPROTOSYNC_INCLUDE_COMMIT_HASH = "true"
env.FEDIPROTOSYNC_UPDATE_MANIFEST_VERSION = "true"
env.JEMALLOC_SYS_WITH_MALLOC_CONF = "background_thread:true,narenas:1,lg_tcache_max:13,dirty_decay_ms:1000,abort_conf:true"
env.PKG_CONFIG_SYSROOT_DIR = "/"
dependencies = [
    "set-build-container-env-amd64",
    "set-build-container-env-arm64",
]

## Set environment variables for 'linux/amd64' container image builds.
[tasks.set-build-container-env-amd64]
condition = { platforms = ["linux"], env = { TARGETPLATFORM = "linux/amd64", BUILD_ENVIRONMENT = "CONTAINER" } }
category = "container_build"
description = "Set environment variables for 'linux/amd64' container image builds."
workspace = false

env.CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER = "x86_64-linux-gnu-gcc"
env.CC_x86_64_unknown_linux_gnu = "x86_64-linux-gnu-gcc"
env.CXX_x86_64_unknown_linux_gnu = "x86_64-linux-gnu-g++"
env.RUST_TARGET = "x86_64-unknown-linux-gnu"

## Set environment variables for 'linux/arm64' container image builds.
[tasks.set-build-container-env-arm64]
condition = { platforms = ["linux"], env = { TARGETPLATFORM = "linux/arm64", BUILD_ENVIRONMENT = "CONTAINER" } }
category = "container_build"
description = "Set environment variables for 'linux/arm64' container image builds."
workspace = false

env.CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER = "aarch64-linux-gnu-gcc"
env.CC_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-gcc"
env.CXX_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-g++"
env.RUST_TARGET = "aarch64-unknown-linux-gnu"

## Install OS dependencies for a container image build.
[tasks.install-linux-dependencies-container]
condition = { platforms = ["linux"], env = { BUILD_ENVIRONMENT = "CONTAINER" } }
category = "container_build"
description = "Install OS dependencies for a container image build."
workspace = false

install_script = '''
#!/bin/bash

DISTRO_ID=$(cat /etc/*release | sed -nE "s/^ID=(.+)$/\1/p")

PACKAGE_INSTALLER=""
if command -v apt-get &> /dev/null; then
    PACKAGE_INSTALLER="apt-get"
elif command -v dnf &> /dev/null; then
    PACKAGE_INSTALLER="dnf"
else
    echo "Unsupported platform: ${DISTRO_ID}"
    exit 1
fi

if [ "${PACKAGE_INSTALLER}" == "apt-get" ]; then
    apt-get update
    apt-get install -y \
        build-essential \
        g++-x86-64-linux-gnu \
        libc6-dev-amd64-cross \
        g++-aarch64-linux-gnu \
        libc6-dev-arm64-cross \
        crossbuild-essential-arm64 \
        crossbuild-essential-amd64 \
        git \
        pkg-config \
        cmake

    case "${TARGETPLATFORM}" in
        "linux/amd64")
            dpkg --add-architecture amd64
            apt-get update
            apt-get install -y \
                libpq-dev:amd64 \
                libpq5:amd64 \
                libsqlite3-dev:amd64 \
                libsqlite3-0:amd64 \
                libssl-dev:amd64
            ;;
        "linux/arm64")
            dpkg --add-architecture arm64
            apt-get update
            apt-get install -y \
                libpq-dev:arm64 \
                libpq5:arm64 \
                libsqlite3-dev:arm64 \
                libsqlite3-0:arm64 \
                libssl-dev:arm64
            ;;
        *)
            echo "Unsupported platform: ${TARGETPLATFORM}"
            exit 1
            ;;
    esac
elif [ "${PACKAGE_INSTALLER}" == "dnf" ]; then
    dnf install -y \
        gcc \
        gcc-c++ \
        glibc-devel.x86_64 \
        glibc-devel.aarch64 \
        git \
        pkgconfig \
        cmake

    case "${TARGETPLATFORM}" in
        "linux/amd64")
            dnf install -y \
                libpq-devel.x86_64 \
                libpq.x86_64 \
                sqlite-devel.x86_64 \
                sqlite.x86_64 \
                openssl-devel.x86_64
            ;;
        "linux/arm64")
            dnf install -y \
                libpq-devel.aarch64 \
                libpq.aarch64 \
                sqlite-devel.aarch64 \
                sqlite.aarch64 \
                openssl-devel.aarch64
            ;;
        *)
            echo "Unsupported platform: ${TARGETPLATFORM}"
            exit 1
            ;;
    esac
fi
'''
